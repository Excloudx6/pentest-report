import nmap
import os
import re
from shutil import copyfile
from action import Action

class PortScanAction(Action):
    def __init__(self):
        super().__init__('port_scan', ['full_scan_trigger'])
        self.nmap = nmap.PortScanner()

    def run(self, actions):

        path = self.getOutputPath()

        result = {}
        scanned = 0
        total = len(actions['_trigger']['params']['hosts'])


        for host in actions['_trigger']['params']['hosts']:
                
            ip = host['ip']
            self.reportProgress({'percentage': 100*scanned/total, 'description' : '{}/{} (scanning: {})'.format(str(scanned),str(total), ip)})
            print('Scanning host {}'.format(ip))
            self.nmap.scan(ip, '1-65535', arguments='-T4 -A -Pn')
    
#            print(str(self.nmap));
            if not (str(ip) in self.nmap.all_hosts()):
                print('Host is down: {}. Skipping it'.format(ip))
                continue
            result[ip] = self.nmap[ip]
            print(self.nmap.command_line())
            if 'tcp' in self.nmap[ip]:
                for port in self.nmap[ip]['tcp'].keys():
                    print(self.nmap[ip]['tcp'][port])

            # Mongo expects strings as keys. Keys conversion.
            if 'tcp' in result[ip]:
                result[ip]['tcp'] = {str(k):v for k,v in result[ip]['tcp'].items()}
            if 'udp' in result[ip]:
                result[ip]['udp'] = {str(k):v for k,v in result[ip]['udp'].items()}

            result[ip]['nmap_xml'] = self.nmap.get_nmap_last_output()
            
            filename = "nmap_" + ip + ".xml"
            with open(path + "/" + filename, "w") as xmlfile:
                xml = self.nmap.get_nmap_last_output()
                # WARNING: this might be vulnerable if it did not match the intended part
                m = re.search('file://(.*nmap.xsl)', xml)
                copyfile(m.group(1), path+"/nmap.xsl")
                xml = re.sub(r"file://(.*)nmap.xsl", r"nmap.xsl", xml)
                
                print(xml, file=xmlfile)
                self.reportOutputFile(filename)

            scanned += 1


        self.reportProgress({'percentage': 100*scanned/total, 'description' : '{}/{})'.format(str(scanned),str(total))})
        print(result)
        return {'status': 'done', 'result': {'hosts': result}}



a = PortScanAction()
a.scan()
