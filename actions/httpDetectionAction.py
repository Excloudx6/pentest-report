import http.client
import sys
import os
import subprocess
import re
from action import Action

class HttpDetectionAction(Action):
    def __init__(self):
        super().__init__('http_detection', ['full_scan_trigger', 'port_scan'])

    def __httpHeader(self, string):
        s="\n".join(string.decode("utf-8").splitlines())
        ret= s.split('\n\n')[0]
        return ret
        

    def __scanPort(self, host, port):
        host = re.sub(r'[^a-zA-Z0-9_\.]','', host)
        print('testing port ', port)
        https = subprocess.Popen('curl https://{}:{} -s -k -i --max-time 5 | grep HTTP -A 2000'.format(host,port), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        httpsout, httpserr = https.communicate()

        http = subprocess.Popen('curl http://{}:{} -s -k -i   --max-time 5 | grep HTTP -A 2000'.format(host,port), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        httpout, httperr = http.communicate()

        #print(http.returncode, ', ', https.returncode);
        #print(httpout, ', ', httperr);
        #print(httpsout, ', ', httpserr);
        if https.returncode == 0:
            return {'protocol': 'https', 'http_response': httpsout.decode("utf-8"), 'http_header': self.__httpHeader(httpsout)}
        if http.returncode == 0:
            return {'protocol': 'http', 'http_response': httpout.decode("utf-8"), 'http_header': self.__httpHeader(httpout)}
        return None


    def run(self, actions):

        result = {}
        total = 0
        scanned = 0
        for host,host_det in actions['port_scan']['result']['hosts'].items():
            if 'tcp' in host_det:
                total += len(host_det['tcp'])

        for host,host_det in actions['port_scan']['result']['hosts'].items():
            print('Scanning host {}'.format(host))
            hostresult = {'tcp': {}}
            if 'tcp' in host_det:
                for port, port_det in host_det['tcp'].items():
                    portresult = self.__scanPort(host, port)
                    if not portresult is None:
                        hostresult['tcp'][port] = portresult
                    scanned += 1
                    self.reportProgress({'percentage': 100*scanned/total, 'description': "{}/{} (scanning: {}:{})".format(str(scanned),str(total),host,str(port))})
                    
            result[host] = hostresult
        ret =  {'status': 'done', 'result': {'hosts': result}}
        #print (ret)
        return ret



a = HttpDetectionAction()
a.scan()
