import React from 'react';
import {Form, List, Grid, Label, Button, Message, Accordion, Icon} from 'semantic-ui-react'
import 'whatwg-fetch'
import {Link} from 'react-router-dom'
import {urlPrefix} from '../utils.js'
import DeleteButton from './DeleteButton.js'

export class NewPentest extends React.Component {
    state = {
        name:'',
        selectedFile: null,
        description: ''
    }

    handleInputChange = (event) => {
        const target = event.target;
        const value = target.type === 'checkbox' ? target.checked : target.value;
        const name = target.name;

        this.setState({
          [name]: value
        });
    }

    strip = (name) => {
      var ret = name.replace(/ /g, '-').replace(/[^a-zA-Z0-9-]/g, '');
      // UGLY: upon IDs exactly 12-chars-long, the Mongo/Express API converts the ID to Base64. Work around: avoid 12-chars...
      if(ret.length===12)
        ret += '-';

      return ret;
    }

    handleCreate = () => {
        if(this.isValid()) {
            //console.log(this.state);
            let t=this;
            let nameStripped = t.strip(t.state.name);
            let defaultJSON = {code: nameStripped, name:t.state.name, readWriteAccess: [this.props.whoami.user.username]};
            let customJSON = Object.assign(defaultJSON, this.state.description)
            fetch(urlPrefix + '/api/v1/pentests/'+nameStripped,
              {method: 'put',credentials: 'include',
               body: JSON.stringify(customJSON),
               headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
               }
            }).then(response => {
              //console.log("Properties created: ");
              t.props.history.push('/');
            }).catch(function(ex) {
              console.log("ERROR:" + ex);
            });
        }
    }

    isValid = () => {
        return ('name' in this.state && this.state.name.length>0);
    }

    handleFileChange = event => {
      this.setState({
        selectedFile: event.target.files[0]
      }, ()=>this.fileUpload())
    }

    fileUpload = () => {
        //this.handleFileChange; // TODO: this does not do anything. Should we remove it? Don't have time to troubleshoot it now...
        var fd = new FormData();
        fd.append('form', this.state.selectedFile, this.state.selectedFile.name);
        fetch(urlPrefix + '/upload', {method: 'POST', credentials: 'include', body: fd})
        .then(response => {
            return response.json()})
        .then(result => {
        //console.log(result)})
            this.setState({description: result});})
             //console.log(this.state.description)})
            //this.handleCreate(result)})
        .catch(function(ex) {           
            console.dir(ex);
            console.log("ERROR (1):" + ex);
        });
    }

    render() {return (
        <Form>
            <Grid columns='two'>
            <Grid.Row>
            <Grid.Column>
            <h2>New pentest</h2>
            </Grid.Column>
            <Grid.Column textAlign="right">
            <input style={{display: 'none'}} type="file" accept=".docx" onChange={this.handleFileChange} ref={ fileInput => this.fileInput = fileInput }/>
            <Button onClick={() => this.fileInput.click()} content="Attach Form"/>
            </Grid.Column>
            </Grid.Row>
            </Grid>
            <Form>
            <Form.Input label="Pentest name" name='name' placeholder='name' value={this.state.name} onChange={this.handleInputChange} autoFocus />
            {this.state.description && <Label style={{'marginBottom': '20px'}} pointing>Description: <b>{this.strip(this.state.name)}</b><p><code>{JSON.stringify(this.state.description, null, 4)}</code></p></Label>}

            <Form.Button active={this.isValid()} primary onClick={this.handleCreate}>Create</Form.Button>
            </Form>

        </Form>

    )}
}



///////////

class DeletePentest extends React.Component {
    handleDelete = () => {
        let t = this;
        fetch(urlPrefix + '/api/v1/pentests/'+t.props.code, {method: 'delete',credentials: 'include'})
            .then(response => {
                t.props.onDeleted();
            });

    }

    render = () => {return (
        <DeleteButton onDelete={this.handleDelete}/>
    )}
}

export class Pentests extends React.Component {
    constructor(props) {
        super(props);
        this.state = {pentests: [], activeIndex: 0};
//        alert(JSON.stringify(props.pentests,null,4));
        this.add = this.add.bind(this);
        this.refresh = this.refresh.bind(this);
        this.refresh();
    }


    refresh() {
        let t = this;
        fetch(urlPrefix + '/api/v1/pentests', {credentials: 'include'})
        .then(response => {
            return response.json()})
        .then(function(json) {
            if('success' in json && json.success === false) {
              console.log("ERROR: " + JSON.stringify(json, null, 4));
              t.setState({error: json});
              return;
            }
            t.setState({pentests: json});
        }).catch(function(ex) {
            t.setState({error: ex});
            console.dir(ex);
        });

    }

    add() {
        //this.setState((before) => ({pentests: before.pentests.concat('x')}) );
        this.props.history.push('/newPentest');
    }

    handleClick = (e, titleProps) => {
     const { index } = titleProps
	 const { activeIndex } = this.state
	 const newIndex = activeIndex === index ? -1 : index

         this.setState({ activeIndex: newIndex })
    }

    render() {
        let statusToColor = function(status) {
          switch(status) {
            case 'Planning': return 'yellow';
            case 'In progress': return 'green';
            case 'Completed': return 'grey';
            default: return 'grey';
          }
        };

        const { activeIndex } = this.state
        // const pentests=this.state.pentests;
        console.log('starting render')
        return (
          <div>
            {this.state.error && <Message error floating>{this.state.error.message}</Message>}
            <List divided relaxed>

                <List.Item key='header'><List.Content><List.Header>
                    <Grid columns='two'>
                        <Grid.Row>
                            <Grid.Column>
                                <h1>Penetration tests</h1>

                            </Grid.Column>
                            <Grid.Column textAlign="right">
                                <Button onClick={this.add} content="Add" />

                            </Grid.Column>
                        </Grid.Row>
                    </Grid>

                </List.Header></List.Content></List.Item>


            {this.state.pentests
              .filter(test => test.status !== "Completed")
              .map((test, index) => (
                <List.Item key={test.code}><List.Content >
                      <Grid columns='three'>
                        <Grid.Row>
                            <Grid.Column>
                                <List.Header>
                                    <Link to={'/pentest/'+test.code}><h3>{('name' in test && test.name.length>0) ? test.name : test.code}</h3></Link>
                                </List.Header>

                                <List.Description size='small'>{test.description && test.description.substring(0,200)}</List.Description>
                            </Grid.Column>

                            <Grid.Column textAlign="center">
                                {test.status && <Label horizontal color={statusToColor(test.status)}>{test.status}</Label>}
                            </Grid.Column>

                            <Grid.Column textAlign="right">
                                <DeletePentest code={test.code} onDeleted={this.refresh}/>
                            </Grid.Column>

                        </Grid.Row>
                    </Grid>

                </List.Content></List.Item>
            ))}
            </List>
            <Accordion>
	            <Accordion.Title active={activeIndex === -1} index={0} onClick={this.handleClick}>
	                <h2>
	                <Icon name='dropdown'/>
	                Completed Tests </h2>
	            </Accordion.Title>
	            <Accordion.Content active={activeIndex === -1}>
                  <List divided relaxed>
                   {this.state.pentests
                     .filter( test => test.status === "Completed")
                     .map((test, index) => (
                    <List.Item key={test.code}><List.Content>
                      <Grid columns='three'>
                        <Grid.Row>
                            <Grid.Column>
                                <List.Header>
                                    <Link to={'/pentest/'+test.code}><h3>{('name' in test && test.name.length>0) ? test.name : test.code}</h3></Link>
                                </List.Header>

                                <List.Description size='small'>{test.description && test.description.substring(0,200)}</List.Description>
                            </Grid.Column>

                            <Grid.Column textAlign="center">
                                {test.status && <Label horizontal color={statusToColor(test.status)}>{test.status}</Label>}
                            </Grid.Column>

                            <Grid.Column textAlign="right">
                                <DeletePentest code={test.code} onDeleted={this.refresh}/>
                            </Grid.Column>

                        </Grid.Row>
                    </Grid>
                    </List.Content></List.Item>
                   ))}
                   </List>
                </Accordion.Content>
	        </Accordion> 
            </div>
        )
    }
}
