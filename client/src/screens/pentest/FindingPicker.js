import React, { Component } from 'react';
import {Form, Grid, Button, Modal, Segment, List} from 'semantic-ui-react'
import {urlPrefix} from '../../utils.js'
import './FindingPicker.css'

export default class FindingPicker extends Component  {
  state = {findings: null, open: false, selected: null, selected_content: null, groups: []};

  handleInputChange = (event, data) => {
    const target = event.target;
    const value = target.type === 'checkbox' ? target.checked : data.value;
    this.setState({hostsText: value});
  }

  loadFindings() {
      let t = this;
      // TODO: ENCODE !!!!!!!!! (vulnerable?)
      // fetch(urlPrefix + '/api/v1/findings/?_deleted!=true&fields=id,pentest_id,name,description,remediation,score', {method: 'get',credentials: 'include'})

      fetch(urlPrefix + '/api/v1/getClones', {method: 'get',credentials: 'include'})
      .then(response => {
          return response.json()})
      .then(function(json) {
          console.log("got findigs: ");// +JSON.stringify(json,null,4));
          let groups = json ? t.groupBy(json, 'pentest_id') : [];
          t.setState({findings: json, loaded: true, groups: groups});
      }).catch(function(ex) {
          console.log("ERROR:" + ex);
      });
  }


  handleOpen = () => {
    this.loadFindings();
    //TODO
    this.setState({open: true, selected: null, selected_content: null});
  }

  handleClose= () => {
    this.setState({open: false});
  }

  handleSelect= () => {
    this.handleClose();
    this.props.onSelect(this.state.selected);
  }

  handleFindingClick = (finding_id, pentest_id) => {
    console.log(finding_id);
    console.log(this.state.findings.find(f => f.id === finding_id));
    this.setState({
      selected: {finding_id: finding_id, pentest_id: pentest_id},
      selected_content: this.state.findings.find(f => f.id === finding_id)
    });
  }

  groupBy = function(xs, key) {
    return xs.reduce(function(rv, x) {
      (rv[x[key]] = rv[x[key]] || []).push(x);
      return rv;
    }, {});
  }

  render() {

    return (
      <Modal open={this.state.open} trigger={<Button onClick={this.handleOpen}>{this.props.label}</Button>}>
         <Modal.Header>Pick a finding</Modal.Header>
         <Modal.Content>
         {this.state.findings===null && <Segment basic loading><div style={{'height': '150px'}}></div></Segment>}

         <Grid columns='two'>
             <Grid.Row>
                 <Grid.Column width={8}>

                          {this.state.findings && Object.keys(this.state.groups).map((pentest)  => (
                            <div>
                            <List className='findings-group' verticalAlign='middle'>
                              <List.Item>
                                <List.Content>
                                  <span>{pentest}</span>
                                </List.Content>
                              </List.Item>
                            </List>
                            <List className='findings-list' selection verticalAlign='middle'>
                              {this.state.groups[pentest].map((finding,id) => (
                              <List.Item onClick={this.handleFindingClick.bind(this,finding.id, finding.pentest_id)} active={this.state.selected===finding.id} key={finding.id}>
                                <List.Content>
                                  <List.Header>{finding.name}</List.Header>
                                </List.Content>
                              </List.Item>
                              ))}
                            </List>
                            </div>
                          ))}

                 </Grid.Column>
                 <Grid.Column width={8} textAlign="left">
                    {this.state.selected_content && (
                      <Form>
                      <Form.Field>
                        <label>Name</label>
                        <div>{this.state.selected_content.name || ""}</div>
                      </Form.Field>

                      <Form.Field>
                        <label>Description</label>
                        <div>{this.state.selected_content.description || ""}</div>
                      </Form.Field>

                      <Form.Field>
                        <label>Remediation</label>
                        <div>{this.state.selected_content.remediation || ""}</div>
                      </Form.Field>
                      </Form>

                    )}
                 </Grid.Column>
             </Grid.Row>
         </Grid>

         </Modal.Content>
         <Modal.Actions>
           <Button content='Cancel' onClick={this.handleClose} />
           <Button active={this.state.selected!==null} primary={this.state.selected!==null} content='Select' onClick={this.handleSelect} />
         </Modal.Actions>
       </Modal>
    );
  }
}
