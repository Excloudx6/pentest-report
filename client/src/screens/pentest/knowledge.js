import React, { Component } from 'react';
import {Message, Button, Grid, Icon, List, Label, Segment} from 'semantic-ui-react'
import 'whatwg-fetch'
//import {withRouter,Redirect, Link,HashRouter, Switch, Route} from 'react-router-dom'
import {urlPrefix} from '../../utils.js'
//import ConfigurableForm from "./ConfigurableForm.js";
// import HostsPicker from "./HostsPicker.js"
// import update from 'immutability-helper';
import RawDataModal from '../RawDataModal.js'
import './knowledge.css'

var obfuscate = function (password) {
  return (password.substr(0,1) + '*'.repeat(password.length-1) )
};

var groupBy = function(xs, keyFun) {
  return xs.reduce(function(rv, x) {
    (rv[keyFun(x)] = rv[keyFun(x)] || []).push(x);
    return rv;
  }, {});
};


const AsciiartButton = ({label, onClick}) => (
  <div className='asciiartButton' onClick={onClick}>
  .-{'-'.repeat(label.length)}-.<br/>
  | {label} |<br/>
  *-{'-'.repeat(label.length)}-*<br/>
  </div>
);

const ToClipboard = ({string}) => {
  const copyToClipboard = () => {
    const el = document.createElement('textarea');
    el.value = string;
    el.setAttribute('readonly', '');
    el.style.position = 'absolute';
    el.style.left = '-9999px';
    document.body.appendChild(el);
    el.select();
    document.execCommand('copy');
    document.body.removeChild(el);
  };
  return <Icon link color='grey' className='toClipboard' name='clipboard' onClick={copyToClipboard}/>
}

export class PentestKnowledgePasswordsList extends Component {
  state = {collapsed: true};
  collapseAtLength = 20;

  toggleCollapsed = () => {
    this.setState({collapsed: !this.state.collapsed});
  }

  render() {

    let list = this.props.list.length > this.collapseAtLength && this.state.collapsed ? this.props.list.slice(0, this.collapseAtLength) : this.props.list;
    return (
      <div>
      <div className='passwordsList'>
      {list.map((up, i) => (
          <div key={i}>
          <code>{up[0] + ' ' + obfuscate(up[1])}</code>
          <RawDataModal label='reveal' json={up}/>
          </div>
        ))
      }
      </div>
      {this.props.list.length > this.collapseAtLength && <Button size='mini' onClick={this.toggleCollapsed} >{this.state.collapsed ? "Show all" : "Collapse"}</Button>}
      </div>

    )
  }
}

export class PentestKnowledgeConsole extends Component {
  state = {collapsed: true};
  collapseAtLength = 16; // lines
  toggleCollapsed = () => {this.setState({collapsed: !this.state.collapsed})}

  render () {
    const r=this.props.result;
    return (
        <div className='shell'>
        <code>
        # {r.cmd}{'\n'}
        {(r.stdout.split('\n').length > this.collapseAtLength && this.state.collapsed) ? r.stdout.split('\n').slice(0, this.collapseAtLength).join('\n')+"\n..." : r.stdout}
        <br/>{(r.stdout.split('\n').length > this.collapseAtLength) &&
          <AsciiartButton label={this.state.collapsed?'Show All':'Collapse'} onClick={this.toggleCollapsed}/>
        }
        <span className='stderr'>{r.stderr}</span></code>
        </div>
    )
  }
}

export class PentestKnowledgeSSHExecGrouped extends Component {
  state = {collapsed: true};
  collapseAtLength = 20;

  render () {
    const groups = groupBy(this.props.list, (i) => (i.key.cmd_name)) ;


    return (
      <div>
      <h3>{this.props.name}</h3>
      <List>
      {Object.keys(groups).map((g_name,index) => {
        var g_list = groups[g_name];
        return(
        <div key={index}>
        <List.Item className="sshHeader" key={g_list+index}>
          <List.Content>
          {<code><Label color='green'>{g_name}</Label> ({g_list.length} items)</code>}
          </List.Content>
        </List.Item>

        <Grid>
        {g_list.map((r, kindex) => (

          <Grid.Row key={kindex}>
          <Grid.Column width="4">
            <code>{r.input.host} {r.input.username}</code>
            <RawDataModal json={r}/>
          </Grid.Column>
          <Grid.Column width="10">
            {r.result.cmd_results.map((r,index) => (
              <PentestKnowledgeConsole key={index} result={r}/>
            ))}
          </Grid.Column>
          </Grid.Row>
        ))}
        </Grid>
        </div>
        );
      })

      }
      </List>
      </div>
    )
  }
}


export class PentestKnowledgeList extends Component {
  state = {collapsed: true};
  collapseAtLength = 20;


  toggleCollapsed = () => {
    this.setState({collapsed: !this.state.collapsed});
  }

  render() {

    let list = this.props.list.length > this.collapseAtLength && this.state.collapsed ? this.props.list.slice(0, this.collapseAtLength) : this.props.list;
    let clipboardString = null;
    if (this.props.clipboardMap) {
      clipboardString = this.props.list.map(this.props.clipboardMap).join('\n');
    }

    return (
      <div>
      <h3>{this.props.name}
        {clipboardString && <ToClipboard string={clipboardString}/>}
      </h3>
      <List>
      {list.map((k,index) => (
        <List.Item key={k.id}>
          <List.Content>
          {(k.type==='port' && (
              <div>
              <code>{k.host + ' ' + k.port}</code>
              <RawDataModal json={k}/>
              </div>
            ))
          }

          {(k.type==='known_userpass' &&
            <div>
            <code>Source: <b>{k.source}</b> ({k.data.length})</code><RawDataModal json={k}/>
            <PentestKnowledgePasswordsList list={k.data}/>
            </div>
          )
          }

          {(k.type==='state_action' && k.name==="ssh_scanner" && (
              <div>
              <code>{k.key.host + " " + k.key.username + " "+ obfuscate(k.input.password)}</code>
              <RawDataModal json={k}/>
              </div>
            ))
          }

          {(k.type==='state_action' && k.name!=="ssh_scanner" && k.name!=="ssh_exec" && (
              <div>
              <code>{k.name + " " + JSON.stringify(k.key)}</code>
              <RawDataModal json={k}/>
              </div>
            ))
          }

        </List.Content></List.Item>
      ))}
      </List>
      {this.props.list.length > this.collapseAtLength && <Button size='mini' onClick={this.toggleCollapsed} >{this.state.collapsed ? "Show all" : "Collapse"}</Button>}
      </div>
    )
  }
}


export class PentestKnowledge extends Component {
    state = {loaded: false};

    componentDidMount() {
        this.loadState();
    }

    loadState = () => {
        let t=this;

        fetch(urlPrefix + '/api/v1/knowledge/?pentest_id='+t.props.match.params.code, {method: 'get',credentials: 'include'})
        .then(response => {
            return response.json()})
        .then(function(json) {
            if('success' in json && json.success === false) {
              console.log("ERROR: " + JSON.stringify(json, null, 4));
              t.setState({error: json});
              return;
            }
            // console.log("got knowledge: " +JSON.stringify(json,null,4));
            t.setState({knowledge: json, loaded: true});
        }).catch(function(ex) {
            console.log("ERROR:" + ex);
        });
    }

    render () {
        if('knowledge' in this.state) {
            return (
                <div>
                {this.state.error && <Message error floating>{this.state.error.message}</Message>}

                <Grid>
                <Grid.Row>
                <Grid.Column width="12">
                  <h2>Knowledge<RawDataModal json={this.state.knowledge}/></h2>
                </Grid.Column><Grid.Column width="4" textAlign="right">
                </Grid.Column>
                </Grid.Row>
                </Grid>


                <Grid>
                <Grid.Row>

                <Grid.Column width="4">
                <PentestKnowledgeList list={this.state.knowledge.filter(row=>row.type==="port")} name='Ports (port)'/>
                </Grid.Column>

                <Grid.Column width="4">
                <PentestKnowledgeList list={this.state.knowledge.filter(row=>row.type==="known_userpass")} name='Known credentials (known_userpass)'/>
                </Grid.Column>

                <Grid.Column width="4">
                <PentestKnowledgeList list={this.state.knowledge.filter(row=>row.type==="state_action" && row.subtype==="result" && row.name==="ssh_scanner")} name='SSH access (state_action)' clipboardMap={({input})=>(input.host+' '+input.username+' '+input.password)}/>
                </Grid.Column>

                <Grid.Column width="4">
                <PentestKnowledgeList list={this.state.knowledge.filter(row=>row.type==="state_action" && row.subtype==="result" && row.name!=="ssh_scanner" && row.name!=="ssh_exec")} name='Others (state_action)'/>
                </Grid.Column>


                </Grid.Row>

                <Grid.Row>
                <Grid.Column width="16">
                <PentestKnowledgeSSHExecGrouped list={this.state.knowledge.filter(row=>row.type==="state_action" && row.subtype==="result" && row.name==="ssh_exec")} name='SSH exec (state_action)'/>

                </Grid.Column>
                </Grid.Row>


                </Grid>




                </div>
            );
        } else
          return <Segment basic loading><div style={{'height': '150px'}}></div></Segment>;
    }
}
