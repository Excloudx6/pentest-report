import React, { Component} from 'react';
import {Form} from 'semantic-ui-react'
// import {randomID, urlPrefix} from '../../utils.js'
import '../../timeline.css'
import './ConfigurableForm.css'

const SmallLink = ({onClick, children}) => {
  return <a className='selectAll' onClick={onClick}>{children}</a>;
}


export default class ConfigurableForm extends Component  {


  createRadios = (label, attributeName, options) => {
    return (
      <Form.Group inline key={attributeName}>
        <label style={{"width": "70px"}}>{label}</label>
        {options.map((value) => <Form.Radio key={attributeName + value} name={attributeName} label={value} value={value} checked={this.props.values[attributeName] === value} onChange={this.props.onChange} />)}
      </Form.Group>);
  }

  selectAll = (name, options) => {
      // console.log(name);
      // console.log(options);
      let all = options.map(v => (typeof(v)==='string' ? v : v.value));
      // console.log(all);
      // WARNING: This is an ugly hack to satisfy the even handler...
      this.props.onChange({target: {}}, {name:name, value: all });
  }

  render() {

    const config = this.props.config;
    const form = config.inputs.map((input)=>{
      switch (input.type) {
        case 'input':
          return <Form.Input key={input.name} name={input.name} label={input.label} value={this.props.values[input.name] || ""}  onChange={this.props.onChange}/>;
        case 'textArea':
          return <Form.TextArea  key={input.name} name={input.name} label={input.label} value={this.props.values[input.name] || ""}  onChange={this.props.onChange} rows={input.rows || 4}/>;
        case 'singleChoice':
          return <Form.Select  key={input.name} name={input.name} label={input.label} value={this.props.values[input.name] || ""}  onChange={this.props.onChange} options={input.options} placeholder='Choose one' />
        case 'multipleChoice':
          return <Form.Dropdown key={input.name} name={input.name} label={<label>{input.label}<SmallLink onClick={this.selectAll.bind(this, input.name, input.options)}>select all</SmallLink></label>} value={this.props.values[input.name] || []}  onChange={this.props.onChange} options={input.options} placeholder='Choose' fluid multiple selection />
        case 'radio':
          return this.createRadios(input.label, input.name, input.options);
        case 'date':
          return <Form.Input type="date" className="form-control" key={input.name} name={input.name} label={input.label} value={this.props.values[input.name] || ""} onChange={this.props.onChange} />;
        case 'datetime':
          return <Form.Input type="datetime-local" className="form-control" key={input.name} name={input.name} label={input.label} value={this.props.values[input.name] || ""} onChange={this.props.onChange} />;
        default: return null;
      }
      // return null;
    });

    return <Form>{form}</Form>;
  }

}
