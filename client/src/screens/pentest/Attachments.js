import React, { Component } from 'react';
import {Card, Image, Form, Icon, Grid} from 'semantic-ui-react'
// import {randomID, urlPrefix} from '../../utils.js'
import './Attachments.css'


function UploadButton({label, onUpload, id}) {
  let fileInput = null;
  // If no id was specified, generate a random one
  const uid = id || Math.random().toString(36).substring(7);

  return (
    <span>

          <label htmlFor={uid} className="ui icon button">
            <i className="attach icon"></i>
            {label}
          </label>

      <input type="file" id={uid}
        style={{display: "none"}}
        onChange={() => {
          var f = fileInput;
          var file = fileInput.files[0]
          // console.log(file);
          //onUpload(file);
          var reader = new FileReader();
          reader.onload = function(e) {
            var data = e.target.result;
            onUpload(file.name, data, uid);
            f.value=null; // reset the input to allow attaching the same file twice (e.g. after removal).
//            console.log("photo setting id: "+uid);
          }
          if(file)
            reader.readAsDataURL(file);
        }}
        ref={input => {
          fileInput = input;
        }}
      />
    </span>
  );
}

export default class Attachments extends Component  {

  handleUpload = (filename, data, id) => {
    this.props.onUpload(filename, data, id);
  }

  handleDelete= (e, attachment) => {
    console.log('Att: id: ' + attachment.id);
    this.props.onDelete(attachment.id);
  }

  handleInputChange = (event, attachment) => {
      const target = event.target;
      const value = target.type === 'checkbox' ? target.checked : attachment.value;
      // const name = attachment.name;
      this.props.onLabelChange(attachment.attachmentid, value);
  }


  render () { return (
    <div className='attachments'>

    <Grid>
    <Grid.Row>
    <Grid.Column width="12">
      <h3>Attachments</h3>
    </Grid.Column><Grid.Column width="4" textAlign="right">
      <UploadButton label='Upload' onUpload={this.handleUpload}/>
    </Grid.Column>
    </Grid.Row>
    </Grid>


    {this.props.attachments && this.props.attachments.map((attachment) => (
      <Card fluid={true} key={attachment.id}>
      <Image src={attachment.dataURL}/>
      <Card.Content>

      <Grid>
      <Grid.Row>
      <Grid.Column width="16">
      <Form>
      <Form.Input name='label' label='Label' attachmentid={attachment.id}  value={attachment.label || ""}  onChange={this.handleInputChange} width={16}/>
      </Form>
      </Grid.Column>
      </Grid.Row>
      <Grid.Row>
      <Grid.Column width="12">
          {attachment.filename}
      </Grid.Column><Grid.Column width="4" textAlign="right">
            <Icon link size='large' name='close' attachmentid={attachment.id} onClick={(e)=> this.handleDelete(e,attachment)} />
      </Grid.Column>
      </Grid.Row>
      </Grid>


      </Card.Content>
      </Card>
    ))}

    {(this.props.attachments && this.props.attachments.length>0) && (
      <Grid>
    <Grid.Row>
    <Grid.Column width="12">
    </Grid.Column><Grid.Column width="4" textAlign="right">
      <UploadButton label='Upload' onUpload={this.handleUpload}/>
    </Grid.Column>
    </Grid.Row>
    </Grid>
    )}


    {(!this.props.attachments || this.props.attachments.length===0) && (
      <div className='no-attachments'>no attachments yet</div>
    )}

    </div>
  )}
}
