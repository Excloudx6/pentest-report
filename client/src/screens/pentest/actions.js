import React, { Component } from 'react';
import {Message,Segment, Button, List, Grid, Label, Card, Divider} from 'semantic-ui-react'
import 'whatwg-fetch'
import {randomID, urlPrefix, timeSince} from '../../utils.js'
import './actions.css'
import DeleteButton from '../DeleteButton.js'
import RawDataModal from '../RawDataModal.js'
import update from 'immutability-helper';

// TODO: FIX THIS MODULE. It does not work....
class AllFilesButton extends Component {
  openAllFiles = () => {
    var w = window.open('');

    // XSS warning: file_path and action_id are assumed to be trusted here!!!
    var html = this.props.files.map((file, index) => (
      '<div><iframe border=0 frameBorder=0 framespacing=0 marginHeight=0 marginWidth=0 scrolling=no vspace=0 width=100% style="padding-bottom: 30px; margin-bottom: 30px; border-bottom: 2px; border-style: solid; border-width: 1px; border-color: grey; overflow:visible; height:calc(100vh - 4px); width:calc(100vw - 4px); box-sizing: border-box" src="' + urlPrefix + '/actionfiles/' + this.props.action.id + '/'+file.file_path+'" onload="this.style.height = this.contentWindow.document.body.scrollHeight + \'px\';>' + file.file_path + '</iframe></div>'
    ));
    html = html.join('');

    html= "<html><head></head><body>"+html+'</body></html>';

    console.log(html);
    w.document.body.innerHTML = html;
  }

  render = () => {
    return (<span></span>)
    // return (<a className="openAllButton" onClick={this.openAllFiles}>open all</a>)
  }
}

class PentestAction extends Component {
    state = {showDeleteConfirmation: false}

    handleDelete = () => {
      this.props.onDelete(this.props.action);
    }

    render = () => {
      const action = this.props.action;
      return (

        <div className={action.deleted ? 'actionDeleted' : ''}>
        <div className={action.is_trigger ? 'actionParent' : 'actionChild'}>
      <Grid columns='five'>
        <Grid.Row>
            <Grid.Column>
                <List.Header>
                    <h4>{'display_name' in action? action.display_name : action.name} <RawDataModal json={action}/></h4>
                </List.Header>
            </Grid.Column>
            <Grid.Column>
                <span className="minor">created {timeSince(action.created_at*1000)} ago</span><br/>

                  {'valid_until' in action && (action.valid_until > Date.now()/1000 ?
                    (<span className='notExpired'> valid for {timeSince(action.valid_until*1000)}</span>) :
                    (<span className='expired'>closed</span>)
                  )}
            </Grid.Column>

            <Grid.Column>
                {'status' in action && (
                  <Label.Group color={action.status==='started' ? 'green':'gray'}>
                    <Label>{action.status}
                      {'progress' in action && action.status==='started' && (<Label.Detail>{parseInt(action.progress.percentage,10)}%</Label.Detail>)}
                    </Label>
                  </Label.Group>)}
            </Grid.Column>

            <Grid.Column>
                {'progress' in action && 'status' in action && action.status==='started' && action.progress.description}
            </Grid.Column>


            <Grid.Column>
            {!action.deleted && <DeleteButton onDelete={this.handleDelete}/>}
            {action.deleted && <Label color='red' horizontal>deleted</Label>}

            </Grid.Column>

        </Grid.Row>
        </Grid>
        {!action.deleted && action.files && action.files.length > 0 && (

            <Card>
              <Card.Content>
                <Card.Meta>Files <AllFilesButton files={action.files} action={action}/></Card.Meta>
                <Card.Description>
                {action.files.map((file, index) => (
                  <div><a target="_blank" rel="noopener noreferrer" href={urlPrefix+"/actionfiles/"+action.id+"/"+file.file_path}>{file.file_path}</a></div>

                ))}
                </Card.Description>
              </Card.Content>
            </Card>
        )}

        {!action.deleted && action.result && action.name === 'open_shares' && (
          Object.keys(action.result.hosts).map(host => (
            <div>
              <code className='shell'>{action.result.hosts[host].join('\n')}</code>
            </div>
          ))
        )}

        {!action.deleted && action.result && action.name !== 'open_shares' && <code>{JSON.stringify(action.result, null, 4).substr(1,100)}{JSON.stringify(action.result, null, 4)>100?'...':''}</code>}
        </div></div>
      )}
}

export class PentestActions extends Component {
    state = {loaded: false}

    componentWillUnmount() {
      clearInterval(this.interval);
    }

    componentDidMount() {
        this.loadActions();
        this.loadHosts();
        this.interval = setInterval(this.loadActions, 15000);
    }

    loadHosts = () => {
        let t = this;
        // TODO: ENCODE !!!!!!!!! (vulnerable?)
        fetch(urlPrefix + '/api/v1/pentests/'+this.props.match.params.code, {method: 'get',credentials: 'include'})
        .then(response => {
            return response.json()})
        .then(function(json) {
            if('success' in json && json.success === false) {
              console.log("ERROR: " + JSON.stringify(json, null, 4));
              t.setState({error: json});
              return;
            }
            var hosts = json.hosts;
            t.setState({hosts: hosts});
        }).catch(function(ex) {
            console.log("ERROR:" + ex);
        });
    }


    handleCreate = ( e, { action, content }) => {
            if (typeof this.state.hosts === 'undefined') {
              alert('Ooops. Internal error. Cannot create an action if list of hosts is not pulled yet. Meanwhile: try again.');
              return;
            }

            let t=this;
            let newdocument = {
                pentest_id: this.props.match.params.code,
                name: action+'_trigger',
                //subtype: action,
                is_trigger: true,
                display_name: content,
                status: 'requested',
                params: {hosts: this.state.hosts},
                created_at: Date.now()/1000,
                valid_until: Date.now()/1000+60*60*24*3
            };
            let headers = {
                'Content-Type': 'application/json'
            };

            fetch(urlPrefix + '/api/v1/actions/'+randomID(),
              {method: 'put',credentials: 'include', body: JSON.stringify(newdocument), headers:headers})
            .then(response => {
                return response.json()})
            .then(function(json) {
                if('success' in json && json.success === false) {
                  console.log("ERROR: " + JSON.stringify(json, null, 4));
                  t.setState({error: json});
                  return;
                }

                console.log("Document created: " +JSON.stringify(json,null,4));
                t.loadActions();
            }).catch(function(ex) {
                console.log("ERROR:" + ex);
            });
    }

    handleActionDelete = (action) => {

      var changedAction = update(action, {deleted: {$set: true}});

      let headers = {
          'Content-Type': 'application/json'
      };
      let t = this;
      fetch(urlPrefix + '/api/v1/actions/'+action.id,
        {method: 'put',credentials: 'include', body: JSON.stringify(changedAction), headers:headers})
      .then(response => {
          return response.json()})
      .then(function(json) {
          if('success' in json && json.success === false) {
            console.log("ERROR: " + JSON.stringify(json, null, 4));
            t.setState({error: json});
            return;
          }
          console.log("Document updated: " +JSON.stringify(json,null,4));
          t.loadActions();
      }).catch(function(ex) {
          console.log("ERROR:" + ex);
      });

    }

    loadActions = () => {
        let t = this;
        // TODO: ENCODE !!!!!!!!! (vulnerable?)
        fetch(urlPrefix + '/api/v1/actions/?pentest_id='+this.props.match.params.code, {method: 'get',credentials: 'include'})
        .then(response => {
            return response.json()})
        .then(function(json) {
            if('success' in json && json.success === false) {
              console.log("ERROR: " + JSON.stringify(json, null, 4));
              t.setState({error: json});
              return;
            }
            // Database created. Creating properties entry.
            console.log("got actions: " +JSON.stringify(json,null,4));
            let actions = json.filter(row => ('name' in row && row.is_trigger===true) );
            t.setState({actions: actions, actions_all: json, loaded: true});
        }).catch(function(ex) {
            console.log("ERROR:" + ex);
        });
    }

    render () {return (
        <div>
        {this.state.error && <Message error floating>{this.state.error.message}</Message>}

        <h2>Trigger actions</h2>
        <Button content="Full scan" onClick={this.handleCreate} action='full_scan'/>

        <h2>Actions history</h2>
        {'actions' in this.state && this.state.actions.length>0 ?
            this.state.actions.map((trigger, index) => (
                <List.Item key={trigger.id}><List.Content >

                    <PentestAction action={trigger} onDelete={this.handleActionDelete}/>
                    {!trigger.deleted && this.state.actions_all.map((action, index) => {
                        if (!(action.trigger_id === trigger.id && !action.is_trigger))
                          return null;
                        return <PentestAction action={action} onDelete={this.handleActionDelete}/>
                    })}


                </List.Content></List.Item>
            ))
            : (
              this.state.loaded ?
              <div>No actions</div>
              :<Segment basic loading={!('error' in this.state)}><div style={{'height': '150px'}}></div></Segment>
            )
        }
        <Divider section/>
        {'actions' in this.state && this.state.actions_all.filter(row => ('name' in row && row.trigger_id==='')).map((action,index) => {
          return <PentestAction action={action} onDelete={this.handleActionDelete}/>
        })}
        </div>
    )}
}
