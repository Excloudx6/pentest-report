import React, { Component } from 'react';
// import ReactDOM from 'react-dom';
import {Message,Form, Grid, Button, Icon, Confirm} from 'semantic-ui-react'
import 'whatwg-fetch'
import {randomID, urlPrefix, setCurrentTime} from '../../utils.js'
import update from 'immutability-helper'
import '../../timeline.css'
import RawDataModal from '../RawDataModal.js'


export class PentestTimeline extends Component {
    state = {};

    componentDidMount() {
      this.setState({dirty: {}, tl_description: null, tl_date: null, tl_id: null, selectedTlEntry: null, showDeleteConfirmation: false, currentDatetime: setCurrentTime('full')});
      this.loadTimeline();
    }

    componentWillUnmount() {
      // try to save data...
      this.handleSave();
    }

    loadTimeline() {
        let t = this;
        fetch(urlPrefix + '/api/v1/timeline/?_deleted!=true&pentest_id='+this.props.match.params.code, {method: 'get',credentials: 'include'})
        .then(response => {
            return response.json()})
        .then(function(json) {
            if('success' in json && json.success === false) {
              console.log("ERROR: " + JSON.stringify(json, null, 4));
              t.setState({error: json});
              return;
            }

            console.log("got timeline: " +JSON.stringify(json,null,4));
            t.setState({timeline_entries: json}, () => { t.sortTimeline(); });

        }).catch(function(ex) {
            console.log("ERROR:" + ex);
        });
    }

    setDirty = (id) => {
      if(!(id in this.state.dirty))
        this.setState({dirty: update(this.state.dirty, {[id]: {$set: true} })});
    }

    clearDirty = (id) => {
        this.setState({dirty: update(this.state.dirty, {$unset: [id]})});
    }

    clearDirtyAll = () => {
      this.setState({dirty: {}});
    }

    isDirty = (id) => {
      return(id in this.state.dirty);
    }

    isAnythingDirty = () => {
      if("dirty" in this.state  && Object.keys(this.state.dirty).length > 0) {
        return true;
      }
      return false;
    }

    handleDelete = (event, data) => {
      this.setState({showDeleteConfirmation: true});
      const id = event.currentTarget.id;
      // console.log("About to delete: "+id);
      this.setState((state)=>{return {selectedTlEntry:id}});
      this.setDirty(event.currentTarget.id);
    }
    handleDeleteCancel = () => {
      this.setState({showDeleteConfirmation: false});
      this.clearDirty(this.state.selectedTlEntry);
      this.setState((state)=>{return {selectedTlEntry:null}});
      ;
    }
    handleDeleteConfirm = () => {
      this.setState({showDeleteConfirmation: false});
      this.setState(state=>{return {timeline_entries:
        update(state.timeline_entries, {[this.getSelectedTimelineArrayID(state.selectedTlEntry)]: {"_deleted": {$set: true}}}
        )
      }}, () => { this.handleSave(); this.clearDirty(this.state.selectedTlEntry); });

      this.setState((state)=>{return {selectedTlEntry:null}});
    }

    handleCreate = ( e, { action }) => {
            // console.log("handleCreate");
            // console.log("date:"+this.state.tl_date);
            // //let t=this;
            var id = randomID();
            if(this.state.tl_id === null) {
              this.setState(state=>{return {tl_id:id}});
            }

            var date = this.state.tl_date || this.state.currentDatetime;
            if(this.state.tl_date === null)
              this.setState((state)=>{return {tl_date: state.currentDatetime}});

            let newdocument = {
                pentest_id: this.props.match.params.code,
                id: id,
                tl_description: this.state.tl_description,
                tl_date: this.state.tl_date || this.state.currentDatetime
            };
            // let headers = {
            //     'Content-Type': 'application/json'
            // };
            // console.log(newdocument);

            this.setDirty(newdocument.id);
            this.setState(state=>{return {
              timeline_entries: update(state.timeline_entries, {$push: [newdocument]}),
              tl_id: null,
              tl_description: null,
              tl_date: null,
              currentDatetime: setCurrentTime('full')
            }}, () => { this.sortTimeline(); });
    }

    sortTimeline() {
      if ("timeline_entries" in this.state) {
        let sortedEntries = this.state.timeline_entries.sort((a, b) => new Date(...a.tl_date.split('/').reverse()) - new Date(...b.tl_date.split('/').reverse()));
        this.setState({timeline_entries: sortedEntries});
      }
    }

    handleNewInput = (event, data) => {
        // console.log("handlenewInput:"+this.state.tl_date);
        const target = event.target;
        const currentTarget = event.currentTarget;
        // const value = target.type === 'datetime-local' ? event.currentTarget.value : data.value;
        // const name = target.type === 'datetime-local' ? event.currentTarget.name : data.name;

        target.type === 'datetime-local' ? this.setState(state=>{return {tl_date:currentTarget.value}}) : this.setState(state=>{return {tl_description: data.value}});
        //this.setState(state=>{return {tl_description: state.tl_description, tl_date: state.tl_date}});
        // console.log("handlenewInpu END");
    }

    getSelectedTimelineArrayID = (entryId) => {
      const tl_entries = this.state.timeline_entries;
      let selectedId = entryId;
      let ret = tl_entries ? tl_entries.findIndex((t) => (t.id === selectedId)) : -1;
      // console.log("About to delete: SELECTED "+ret);
      // console.log("About to delete: entries "+this.state.timeline_entries);
      // console.log("About to delete: selectedTlEntry "+this.state.selectedTlEntry);
      return ret;
    }

    handleInputChange = (event, data) => {
        const target = event.target;
        const currentTarget = event.currentTarget;
        // const value = target.type === 'datetime-local' ? event.currentTarget.value : data.value;
        // const name = target.type === 'datetime-local' ? event.currentTarget.name : data.name;

        var entryId = target.id;
        this.setState(state=>{return {selectedTlEntry: entryId}});

        // console.log("inputCHange: "+entryId);
        // console.log("inputCHange arrayid: "+this.getSelectedTimelineArrayID(entryId));
        // console.log("inputCHange data: "+data.value);

        //let newEntry = Object.assign({}, this.state.timeline_entries);
        let newEntry = JSON.parse(JSON.stringify(this.state.timeline_entries));

        target.type === 'datetime-local' ? newEntry[this.getSelectedTimelineArrayID(entryId)].tl_date = currentTarget.value : newEntry[this.getSelectedTimelineArrayID(entryId)].tl_description = data.value;

        this.setState(state=>{return{timeline_entries: newEntry}}, () => { this.sortTimeline() });
        this.setDirty(target.id);
    }

    handleSave = () => {
      var t = this;
      if(this.state.timeline_entries)
        this.state.timeline_entries.forEach(function(timeline_entry) {
            if(t.isDirty(timeline_entry.id)) {
              fetch(urlPrefix + '/api/v1/timeline/'+timeline_entry.id,
                {method: 'put',credentials: 'include', body: JSON.stringify(timeline_entry), headers: {
                   'Accept': 'application/json',
                   'Content-Type': 'application/json'
              }}).then(response => {
                  return response.json()})
              .then(function(json) {
                  if('success' in json && json.success === false) {
                    console.log("ERROR: " + JSON.stringify(json, null, 4));
                    t.setState({error: json});
                    return;
                  }
                  console.log("saved timeline: " +JSON.stringify(json,null,4));
                  t.clearDirty(json.id);
              }).catch(function(ex) {
                  console.log("ERROR:" + ex);
              });
            }
        });
    }

    render () {return (
      <div className="panel-body">
      {this.state.error && <Message error floating>{this.state.error.message}</Message>}

       <Grid>

         <Grid.Row>
            <Grid.Column width="12">
            <h2>Timeline <RawDataModal json={this.state.timeline_entries}/></h2>
         </Grid.Column><Grid.Column width="4" textAlign="right">
            <Button onClick={this.handleSave} primary={this.isAnythingDirty()} disabled={!this.isAnythingDirty()} content={this.isAnythingDirty() ? "Save All" : "Saved"}/>
         </Grid.Column>
         </Grid.Row>

         <Grid.Row>
           <Grid.Column width={11}>
             <h4>Description</h4>
           </Grid.Column>
           <Grid.Column width={3}>
             <h4>Date</h4>
           </Grid.Column>
           <Grid.Column width={2}>
           </Grid.Column>
         </Grid.Row>

         <Grid.Row>
           <Grid.Column width={11}>
             <Form>
             <Form.TextArea spellCheck="true" value={this.state.tl_description || ""} placeholder='Add description of timeline event' rows={1} name="description" onChange={this.handleNewInput}/>
             </Form>
           </Grid.Column>
           <Grid.Column width={3}>
             <div className="ui action input">
                 <Form.Input type="datetime-local" className="form-control" value={this.state.tl_date || this.state.currentDatetime} name="tl_date" onChange={this.handleNewInput}/>
             </div>
           </Grid.Column>
           <Grid.Column textAlign="right" width={2}>
            <Button disabled={!this.state.tl_description} id={randomID()} onClick={this.handleCreate.bind(this)} content="Add" color="green"/>
           </Grid.Column>
         </Grid.Row>


         {'timeline_entries' in this.state && this.state.timeline_entries && this.state.timeline_entries.length > 0 &&
            this.state.timeline_entries.map((timeline_entry, key) => (
              !timeline_entry._deleted &&
              <Grid.Row key={key}>
                <Grid.Column width={11}>
                  <Form>
                  <Form.TextArea spellCheck="true" placeholder='Add description of timeline event' id={timeline_entry.id} value={this.state.timeline_entries[key].tl_description || ""} rows={1} name="description" onChange={this.handleInputChange.bind(this)}/>
                  </Form>
                </Grid.Column>
                <Grid.Column width={3}>
                  <div className="ui action input">
                      <Form.Input type="datetime-local" className="form-control" name="tl_date" id={timeline_entry.id} value={this.state.timeline_entries[key].tl_date} onChange={this.handleInputChange.bind(this)}/>
                      <Confirm id={timeline_entry.id}
                        open={this.state.showDeleteConfirmation}
                        onConfirm={this.handleDeleteConfirm}
                        onCancel={this.handleDeleteCancel}
                        confirmButton='Delete'
                        size='tiny'
                      />
                  </div>
                </Grid.Column>
                <Grid.Column textAlign="right" width={2}>
                  <Icon.Group>
                    <Icon id={timeline_entry.id} link name='trash alternate outline' size='big' color='grey' onClick={this.handleDelete.bind(this)}/>
                  </Icon.Group>
                  <Icon.Group>
                    {this.isDirty(timeline_entry.id) && <Icon color='blue' name='circle' />}
                  </Icon.Group>
                </Grid.Column>
              </Grid.Row>
            ))
         }
       </Grid>

       </div>
    )}
}
