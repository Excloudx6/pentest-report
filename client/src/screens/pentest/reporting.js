import React, { Component } from 'react';
// import ReactDOM from 'react-dom';
import {Message,Form, Grid, Button, Icon, Dropdown} from 'semantic-ui-react'
import 'whatwg-fetch'
import {urlPrefix} from '../../utils.js'
// import update from 'immutability-helper'
import RawDataModal from '../RawDataModal.js'
// import ConfigurableForm from "./ConfigurableForm.js";

// var config = {
//   inputs: [
//     {
//       label: 'Executive Summary',
//       name: 'exec_summary',
//       type: 'textArea',
//       rows: 15,
//       spellcheck: true,
//       autoHeight: true
//     }
//    ]
// };

const FileDownload = require('js-file-download');
const base64Arraybuffer = require('base64-arraybuffer');

export class PentestReporting extends Component {
    state = {};

    componentDidMount() {
      this.loadReporting();
    }

    componentWillUnmount() {
      // try to save data...
      this.handleSave();
    }

    loadReporting() {
        let t = this;
        var pid = this.props.match.params.code;
        fetch(urlPrefix + '/api/v1/reporting/?pentest_id='+pid, {method: 'get',credentials: 'include'})
        .then(response => {
            return response.json()})
        .then(function(json) {
            if('success' in json && json.success === false) {
              console.log("ERROR: " + JSON.stringify(json, null, 4));
              t.setState({error: json});
              return;
            }
            console.log("got reporting: " +JSON.stringify(json,null,4));
            if (json.length === 0) {
              t.setState({reporting: {pentest_id: pid, exec_summary: null}, dirty:false});
            } else {
              t.setState({reporting: json[0], dirty:false});
            }
        }).catch(function(ex) {
            console.log("ERROR:" + ex);
        });
    }

    handleInputChange = (event, data) => {
      const target = event.target;
      const value = target.type === 'checkbox' ? target.checked : data.value;
      const name = data.name;

      // Ugly. change me.
      let newReporting =  JSON.parse(JSON.stringify(this.state.reporting));
//      console.log(event.target);
//      console.log(data);
      newReporting[name]=value;
          //update(this.state.properties, {[name]: {$set: value}});
      this.setState({reporting: newReporting, dirty:true});
    }

    handleSave = () => {
      let t = this;
      console.log("Props update: "+t.props.match.params.code);
      fetch(urlPrefix + '/api/v1/reporting/'+t.props.match.params.code,
            {method: 'put',credentials: 'include', body: JSON.stringify(this.state.reporting), headers: {
                 'Accept': 'application/json',
                 'Content-Type': 'application/json'
            }})
      .then(response => {
          return response.json()})
      .then(function(json) {
          if('success' in json && json.success === false) {
            console.log("ERROR: " + JSON.stringify(json, null, 4));
            t.setState({error: json});
            return;
          }
          // Database created. Creating properties entry.
          console.log("updated: " +JSON.stringify(json,null,4));
          t.setState({response: json});
          t.loadReporting();
      }).catch(function(ex) {
          console.log("ERROR:" + ex);
      });
    }

    handleGen = ( e, { name }) => {
        let t = this;
        var fileName = "";
        var fileType = "";
        var report = "";

        if (name === "report") {
          fileName = this.state.reporting.pentest_id.replace(/ /g,'_') + '_PenetrationTestReport.docx';
          fileType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
          report = "report";
          t.setState({loadingDocument: true});
        } else if (name === "vendor") {
          fileName = this.state.reporting.pentest_id.replace(/ /g,'_') + '_PenetrationTestVendorReport.docx';
          fileType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
          report = "report";
          t.setState({loadingDocument: true});
        } else if (name === "iot") {
          fileName = this.state.reporting.pentest_id.replace(/ /g,'_') + '_IoTTestReport.docx';
          fileType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
          report = "report";
          t.setState({loadingDocument: true});
        } else if (name === "retest") {
          fileName = this.state.reporting.pentest_id.replace(/ /g,'_') + '_RetestReport.docx';
          fileType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
          report = "report";
          t.setState({loadingDocument: true});
        } else {
          fileName = this.state.reporting.pentest_id.replace(/ /g,'_') + '_Archer.xlsx';
          fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
          report = "archer";
          t.setState({loadingExcel: true});
        }
        fetch(urlPrefix + '/generate/' + report,{
          method: 'POST',
          responseType: 'arraybuffer',
          body: JSON.stringify({
            pid:this.state.reporting.pentest_id,
            rType:name
          }),
          credentials: 'include',
          headers: {        'Content-Type': 'application/json',
          'Accept': 'application/json'}
        })
        .then(function(response){
          console.log(response);

          return response.text();
        }).then(function(data){
          console.log(data);
          FileDownload(base64Arraybuffer.decode(data), fileName, fileType);
          t.setState({loadingDocument: false});
          t.setState({loadingExcel: false});
        }).catch(function (error) {
          console.log(error);
          t.setState({loadingDocument: false});
          t.setState({loadingExcel: false});
     });
    }

    render () {
      if('reporting' in this.state)
      return (
      <div className="panel-body">
      {this.state.error && <Message error floating>{this.state.error.message}</Message>}

       <Grid>
         <Grid.Row>
            <Grid.Column width="12">
            <h2>Reporting <RawDataModal json={this.state.reporting}/></h2>
         </Grid.Column><Grid.Column width="4" textAlign="right">
            <Form.Button onClick={this.handleSave} primary={this.state.dirty} disabled={!this.state.dirty} content={this.state.dirty ? "Save" : "Saved"}/>
         </Grid.Column>
         </Grid.Row>
         </Grid>

         <Grid>
         <Grid.Row>
         <Grid.Column width="12">
           <h4>Executive Summary</h4>
         </Grid.Column>
           <Grid.Column width="4">
             <h4>Generate Documents</h4>
           </Grid.Column>
         </Grid.Row>

         <Grid.Row>
         <Grid.Column width="12">
           <Form>
              <Form.TextArea spellCheck="true" autoHeight placeholder='Add executive summary' value={this.state.reporting.exec_summary || ""} rows={15} name="exec_summary" onChange={this.handleInputChange}/>
              
              {true && (<div><h4>Retest Executive Summary</h4>
              <Form.TextArea spellCheck="true" autoHeight placeholder='Add executive summary for the retest' value={this.state.reporting.exec_summary_retest || ""} rows={15} name="exec_summary_retest" onChange={this.handleInputChange}/></div>
              )}
              
           </Form>
         </Grid.Column>
           <Grid.Column width="4">
           <Button.Group color='blue'>
              <Button name="report" primary animated onClick={this.handleGen.bind(this)}>  
                <Button.Content visible>Report</Button.Content>
                <Button.Content hidden>
                  <Icon size="large" name='file word outline'></Icon>
                </Button.Content>
              </Button>
              <Dropdown className='button icon' name='dropdown-full' primary animated loading={this.state.loadingDocument || false}>
              <Dropdown.Menu>
              <Dropdown.Header icon='tags' content='Report type' />
                <Dropdown.Divider />
                <Dropdown.Item icon='user' text='Vendor' name='vendor' onClick={this.handleGen.bind(this)}/>
                <Dropdown.Item icon='undo' text='Retest' name='retest' onClick={this.handleGen.bind(this)}/>
                <Dropdown.Item icon='microchip' text='IoT' name='iot' onClick={this.handleGen.bind(this)}/>
                <Dropdown.Item icon='mobile' text='Mobile' name='report' onClick={this.handleGen.bind(this)}/>
              </Dropdown.Menu>
              </Dropdown>
           </Button.Group>{' '}
           <Button.Group>
           <Button name="archer" positive secondary animated onClick={this.handleGen.bind(this)}>
             <Button.Content visible>Archer</Button.Content>
             <Button.Content hidden>
               <Icon loading={this.state.loadingExcel || false} size="large" name='file excel outline'></Icon>
             </Button.Content>
           </Button>
           </Button.Group>
           </Grid.Column>
         </Grid.Row>
       </Grid>
       </div>
    );
    else return <div>      {this.state.error && <Message error floating>{this.state.error.message}</Message>}</div>;
  }
}
