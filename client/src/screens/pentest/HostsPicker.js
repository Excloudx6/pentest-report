import React, { Component } from 'react';
import {Form,  Grid, Button, Modal, Table} from 'semantic-ui-react'
// import {urlPrefix} from '../../utils.js'
import './HostsPicker.css'

class HostsMassUpload extends Component  {
  state = {hostsText: "", open: false};

  handleInputChange = (event, data) => {
    const target = event.target;
    const value = target.type === 'checkbox' ? target.checked : data.value;
    this.setState({hostsText: value});
  }

  // returned object representation from the input text, e.g. [[a,b,c][d,e,f]]
  hostsObject = () => {
    console.log('text: ' + this.state.hostsText);
    let hosts = this.state.hostsText.split('\n').map((line) => {
      var l = line.split(';');
      if(l.length>3) {
        l[2] = l.slice(2).join(';');
        l=l.slice(0,3);
      }
      l=l.map((e) => {return(e.trim())});
      return l;
    });
    hosts = hosts.map((host) => {return host[0]==='' ? null : {ip:host[0], hostname: host[1], comment: host[2]}});
    hosts = hosts.filter((host) => host!=null);
    return hosts;
  }

  hostsObjectToString = (obj) => {
    if(obj === undefined) return '';
    return obj.map((host) => {
      return (host.ip || '') + ' ; ' + (host.hostname || '') + ' ; ' + (host.comment || '') + '\n';
    }).join('');
  }

  handleOpen = () => {
    console.log( this.hostsObjectToString(this.props.value));
    this.setState({open: true, hostsText: this.hostsObjectToString(this.props.value)});
  }

  handleClose= () => {
    this.setState({open: false});
  }

  handleUpload= () => {
    this.handleClose();
    this.props.onUpload(this.hostsObject());
  }



  render() {
    return (
      <Modal open={this.state.open} trigger={<Button onClick={this.handleOpen}>Edit Hosts</Button>}>
         <Modal.Header>Hosts mass edit</Modal.Header>
         <Modal.Content>
         <p>Enter one host per line. Use the following format: <code>143.1.2.123 ; example.com ; Optional comment</code>.</p>
         <Form>
          <Form.TextArea rows="8" label="Hosts" value={this.state.hostsText || ""} onChange={this.handleInputChange} placeholder='143.1.2.123 ; example.com ; Optional comment'/>;
         </Form>
         <h3>Preview</h3>
         <code>{JSON.stringify(this.hostsObject(),null,4)}</code>
         </Modal.Content>
         <Modal.Actions>
           <Button content='Cancel' onClick={this.handleClose} />
           <Button primary content='Save' onClick={this.handleUpload} />
         </Modal.Actions>
       </Modal>
    );
  }
}


////////


export default class HostsPicker extends Component  {

  handleUpload = (hosts) => {this.props.onChange(hosts)}

  render() {
    return (
      <div className='HostsPicker'>
      <Grid>
      <Grid.Row>
      <Grid.Column width="9">
        <h5>{this.props.label}</h5>
      </Grid.Column><Grid.Column width="7" textAlign="right">
        <HostsMassUpload value={this.props.value} onUpload={this.handleUpload}/>
      </Grid.Column>
      </Grid.Row>
      </Grid>

      {(!this.props.value || this.props.value.length===0) && (
        <div className='no-hosts'>no hosts yet</div>
      )}

      {(this.props.value && this.props.value.length>0) && (
      <Grid>
      <Grid.Column width={16}>
      <Table columns={3} basic='very' size='small'>
        <Table.Header>
         <Table.Row>
           <Table.HeaderCell>IP</Table.HeaderCell>
           <Table.HeaderCell>Hostname</Table.HeaderCell>
           <Table.HeaderCell>Comment</Table.HeaderCell>
         </Table.Row>
        </Table.Header>

        <Table.Body>

        {this.props.value.map((row, index) =>
          <Table.Row key={row.ip+row.hostname}>
           <Table.Cell>{row.ip}</Table.Cell>
           <Table.Cell>{row.hostname}</Table.Cell>
           <Table.Cell>{row.comment}</Table.Cell>
         </Table.Row>
        )}
        </Table.Body>

      </Table>
      </Grid.Column>
      </Grid>
      )}

      </div>
    )

  }

}
