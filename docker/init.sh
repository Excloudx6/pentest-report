#!/bin/sh

# For total cleanup and testin use this: (WARNING: DESTROYS ALL MONGO DATA)
# rm -f ./mongo_admin.password ;docker-compose down ;docker-compose rm -fv; docker ps ; ./init.sh ; admpwd=`cat ./mongo_admin.password`; echo $admpwd ; docker exec -it mongo mongo admin -u admin -p ${admpwd} --authenticationDatabase admin

#mongo_host_data_path=/tmp

ENV_SUFFIX=`cat ../config/default.json | jq '.PentestServer.environmentSuffix' | tr -d '"'`

command -v docker >/dev/null 2>&1 || { echo >&2 "docker not installed. Aborting."; exit 1; }
command -v docker-compose >/dev/null 2>&1 || { echo >&2 "docker-compose not installed. Aborting."; exit 1; }


if [ -e ./mongo_admin.password ] ; then
    echo "Job run already. Exiting. "
    echo "To do DESTRUCTIVE re-init, try this:"
    echo '  rm -f ./mongo_admin.password ;docker-compose down ;docker-compose rm -fv; docker ps ; ./init.sh' # ; admpwd=`cat ./mongo_admin.password`; echo $admpwd ; docker exec -it mongo mongo admin -u admin -p ${admpwd} --authenticationDatabase admin'
    exit
fi

ls ../config/default.json 2>/dev/null || ( echo >&2 "config/default.json not found. Creating it from a template."; cp ../config/default.json.example ../config/default.json )

# Generating random app level admin creds
admin_password=`tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1`
sed -i "s/changeMEplease/$admin_password/g" ../config/default.json

# Self signed certs for the default server config. Do not use them beyond the evaluation period. 
openssl req -nodes -new -x509 -keyout ../config/certs/server-self-signed.key -out ../config/certs/server-self-signed.cert -subj "/C=XX/ST=XXX/L=XXX/O=XXX/CN=www.example.com" && chmod a+r ../config/certs/server-self-signed.key 


mongo_admin_password=`tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1`
mongo_actions_password=`tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1`
mongo_webapp_password=`tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1`
node_session_password=`tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1`

# Mongo preparation
# Admin password created by the container
rm -rf ./*.password
echo -n "${node_session_password}" > node_session.password
echo -n "${mongo_actions_password}" > mongo_actions.password
echo -n "${mongo_webapp_password}" > mongo_webapp.password
echo -n "${mongo_admin_password}" > mongo_admin.password
chmod 600 ./*.password

# Just in case
docker volume rm docker_mongodatavolume-${ENV_SUFFIX} || echo "Ignore the error above"


/bin/bash ./rebuild.sh # --all

# Adding sleep to allow for creation of mongo db on first run
sleep 10

# TODO: running this twice. Provisioning MongoDB creds in Node somehow fails on the first try... 
/bin/bash ./rebuild.sh # --all  



RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# If it's not the first run, it is NOT equal to the above.
password=`cat ../config/default.json | jq '.PentestServer.localUsers.users[0].password' | tr -d '"'`
printf "\n\n---------------------------------------------------\n If everything worked, go to https://127.0.0.1/ and enjoy the tool. \n Username: ${GREEN}admin${NC}\n Password: ${GREEN}$password${NC}\n\n"
printf "\nNOTE: Configure SAML. $RED DO NOT USE IT WITH LOCAL CREDENTIALS ON PRODUCITON.$NC Above credentials are stored CLEAR TEXT in ../config/default.json."
printf "\n\nAll configuration is in ../config/default.json. Run ${GREEN}./rebuild.sh${NC} to apply the configuration changes.\n"
