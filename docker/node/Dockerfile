FROM node:14-stretch

ARG PORT
ENV PORT "$PORT"
ARG http_proxy
ENV http_proxy "$http_proxy"
ARG https_proxy
ENV https_proxy "$https_proxy"


# Override the base log level (info).
ENV NPM_CONFIG_LOGLEVEL warn

RUN apt-get update
RUN apt-get update --fix-missing
RUN apt-get install -y vim apt-utils

# reporting specific dependencies
#RUN apt-get install -y libcairo2-dev libjpeg-dev libpango1.0-dev libgif-dev build-essential g++ libpng16-16 libjpeg-turbo-progs
#RUN apt-get install -y libjpeg8
#RUN wget http://http.us.debian.org/debian/pool/main/libj/libjpeg8/libjpeg8_8d-1+deb7u1_amd64.deb && dpkg -i libjpeg8_8d-1+deb7u1_amd64.deb && rm -f libjpeg8_8d-1+deb7u1_amd64.deb
RUN apt-get install -y yarn
RUN npm install -g nodemon forever

## node-canvas compilation prerequisites
## RUN apt-get install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

RUN apt-get install -y xmlstarlet unzip python3-pip openssl

# Workaround. On one server, http required proxy (apt-get above) but https failed over proxy (npm, pip).
ENV http_proxy ""
ENV https_proxy ""

RUN pip3 install lxml

RUN mkdir -p /usr/src/app /usr/src/app/client /usr/src/app/server /usr/src/app/config

RUN groupadd -r pentest && useradd -r -g pentest -u 1900 pentest
RUN mkdir -p /data/actionfiles && chmod 777 /data/actionfiles

COPY ./client /usr/src/app/client/
RUN chown pentest.pentest /usr/src/app/client -R
# Build the client app
RUN cd /usr/src/app/client/ && yarn && yarn build

COPY ./server /usr/src/app/server/
RUN chown pentest.pentest /usr/src/app/server -R
RUN chmod 777 /usr/src/app/server/plugins
RUN chmod 777 /usr/src/app/server/upload

RUN ls -lr /usr/src/app/config

# Bug workaround. Permission denied otherwise
###RUN chmod a+x  /usr/local/lib/node_modules/yarn/bin/yarn.js


RUN cd /usr/src/app/server/ && yarn 
RUN cd /usr/src/app/server/ && npm rebuild && npm install

COPY ./config /usr/src/app/config/
RUN chown pentest.pentest /usr/src/app/config -R
RUN chmod 666 /usr/src/app/config/credentials.json 

#RUN mkdir /home/pentest && chown pentest.pentest /home/pentest

USER pentest

CMD cd /usr/src/app/server && for i in `seq 1 1000` ; do node ./server.js; echo '----- RESTARTING ------ '; date ; sleep 1; done; 
#CMD cd /usr/src/app/server && forever start ./server.js -l /tmp/server.log -o /tmp/out.log -e /tmp/error.log 
#CMD cd /usr/src/app/server && sleep 1000000
EXPOSE ${PORT}
