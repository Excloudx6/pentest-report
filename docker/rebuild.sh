#!/bin/bash
# Rebuilds docker containers upon the new version of the code as in the ../server, ../client, ../config, etc. Run it to redeploy upon code or config change.
# When run with --all argument, it no docker cache is used. 

export EXTERNAL_PORT=`cat ../config/default.json | jq '.PentestServer.https.port' | tr -d '"'`
export ENV_SUFFIX=`cat ../config/default.json | jq '.PentestServer.environmentSuffix' | tr -d '"'`

EXPOSE_MONGODB=`cat ../config/default.json | jq '.PentestServer.docker.mongodb.exposeExternally' | tr -d '"'`
# MONGODB_PORT=`cat ../config/default.json | jq '.PentestServer.mongodb.port' | tr -d '"'`
MONGODB_EXTERNAL_PORT=`cat ../config/default.json | jq '.PentestServer.docker.mongodb.externalPort' | tr -d '"'`

# mogdodb ports export option used in docker-config. Note: Mongo container always starts on port 27017. 
export EXPOSE_MONGODB_PORTS=""
if [[ "$EXPOSE_MONGODB" == "true" ]] ; then
	export EXPOSE_MONGODB_PORTS="ports: [\"$MONGODB_EXTERNAL_PORT:27017\"]"
fi

# Optionally disable running of node container. Useful for develoment to not block the port and start node manually from the host. 
NODE_VIA_DOCKER_ENABLED=`cat ../config/default.json | jq '.PentestServer.docker.node.enabled' | tr -d '"'`
if [[ "$NODE_VIA_DOCKER_ENABLED" == "false" ]] ; then 
	export DOCKER_NODE_DISABLED="entrypoint: /bin/true"
fi

# HTTP proxy needed for node container's apt-get. Pass http_proxy in env if it's present on the host.
# DOCKER_NODE_ENVIRONMENT=''
#[ ! -z "$http_proxy" ] && export DOCKER_NODE_ENVIRONMENT=$

rm -f ./docker-compose.yml
envsubst < ./docker-compose.yml.template > ./docker-compose.yml



mongo_session_password=`tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1`
rm -rf ./mongo_session.password
echo -n "${mongo_session_password}" > mongo_session.password

# Regeneration of password files
node_session_password=`cat ./node_session.password`
mongo_session_password=`cat ./mongo_session.password`
mongo_actions_password=`cat ./mongo_actions.password`
mongo_webapp_password=`cat ./mongo_webapp.password`
mongo_admin_password=`cat ./mongo_admin.password`
blue_team_extract_password=`cat ./blue_team_extract.password`


/bin/bash ./rebuild_definitions.sh

/bin/bash ./rebuild_domo.sh
mongo_domo_password=`cat ./mongo_domo.password`

rm -f ../config/credentials.json
mkdir -p ./node/config/
echo "{\"credentials\": {\"node_session_secret\": \"${node_session_password}\", \"mongo_webapp_password\": \"${mongo_webapp_password}\", \"mongo_admin_password\": \"${mongo_admin_password}\", \"mongo_actions_password\": \"${mongo_actions_password}\", \"mongo_session_password\": \"${mongo_session_password}\", \"mongo_domo_password\": \"${mongo_domo_password}\"}}" > ../config/credentials.json
chmod 600 ../config/credentials.json

# Node preparation
echo "Rebuilding docker containers"
rm -rf ./node/config
rm -rf ./node/server
rm -rf ./node/client
cp -R ../server ./node/
cp -R ../client ./node/
cp -R ../config ./node/

# Actions preparation
rm -rf ./actions/actions
rm -rf ./actions/config
cp -R ../actions ./actions/
mkdir -p ./actions/config
# Actions container needs only one password
echo "{\"credentials\": {\"mongo_actions_password\": \"${mongo_actions_password}\"}}" > ./actions/config/credentials.json
cp ../config/default.json ./actions/config/

if [ "$1" == "--all" ] ; then
	docker-compose build --no-cache
else
	docker-compose build #--no-cache
fi

docker-compose up -d
docker ps

# Wait for Docker Mongo to wake up (ugly)
sleep 10

echo "Adding admin (this will fails if it's not the first run, ignore)"
# Admin user creation if it's a first run on the DB. 
docker exec -it mongo-${ENV_SUFFIX} mongo admin --authenticationDatabase admin --eval "db.createUser({
    user: 'admin',
    pwd: '${mongo_admin_password}',
    roles: [
    { role: 'root', db: 'admin' },
    { role: 'readWrite', db: 'admin' }]});"


# Mongo users recreation 
echo "Adding mongo users"

docker exec -it mongo-${ENV_SUFFIX} mongo pentest-sessions -u admin -p ${mongo_admin_password} --authenticationDatabase admin --eval "db.dropUser('session')"
docker exec -it mongo-${ENV_SUFFIX} mongo pentest -u admin -p ${mongo_admin_password} --authenticationDatabase admin --eval "db.dropUser('actions')"
docker exec -it mongo-${ENV_SUFFIX} mongo pentest -u admin -p ${mongo_admin_password} --authenticationDatabase admin --eval "db.dropUser('webapp')"
docker exec -it mongo-${ENV_SUFFIX} mongo pentest -u admin -p ${mongo_admin_password} --authenticationDatabase admin --eval "db.dropRole('actionsRole')"

# Actions role creation
echo Create Role
docker exec -it mongo-${ENV_SUFFIX} mongo pentest -u admin -p ${mongo_admin_password} --authenticationDatabase admin --eval "db.createRole(\
   {\
     role: 'actionsRole',\
     privileges: [\
      { resource: { db: 'pentest', collection: 'actions' }, actions: [ 'find', 'update', 'insert' ] },\
      { resource: { db: 'pentest', collection: 'pentests' }, actions: [ 'find', 'update', 'insert' ] },\
      { resource: { db: 'pentest', collection: 'knowledge' }, actions: [ 'find', 'update', 'insert', 'dropCollection', 'remove' ] },\
     ],\
     roles: []\
   }\
)"

# Actions user creation;
docker exec -it mongo-${ENV_SUFFIX} mongo pentest -u admin -p ${mongo_admin_password} --authenticationDatabase admin --eval "db.createUser({ user: 'actions', pwd: '${mongo_actions_password}', roles: ['actionsRole']});"
# Main node app user
docker exec -it mongo-${ENV_SUFFIX} mongo pentest -u admin -p ${mongo_admin_password} --authenticationDatabase admin --eval "db.createUser({ user: 'webapp', pwd: '${mongo_webapp_password}', roles: [{role: 'readWrite', db: 'pentest'}]});"
docker exec -it mongo-${ENV_SUFFIX} mongo pentest-sessions -u admin -p ${mongo_admin_password} --authenticationDatabase admin --eval "db.createUser({ user: 'session', pwd: '${mongo_session_password}', roles: [{role: 'readWrite', db: 'pentest-sessions'}]});"

# Since actionsRole is dropped above, we need to re-assign it to remote mongo users (created with ./create_mongouser.sh)
while read username ; do 
	docker exec mongo-${ENV_SUFFIX} mongo pentest -u admin -p ${mongo_admin_password} --authenticationDatabase admin --eval "db.grantRolesToUser('$username',['actionsRole']);"
done <  ./remote_mongousers.txt 

# restarting Node with the MongoDB alive now.
# sleep 3
# docker restart node-${ENV_SUFFIX} 


# cleanup 
docker rmi $(docker images --filter "dangling=true" -q --no-trunc) 2>/dev/null
docker rmi $(docker images | grep "none" | awk '/ / { print $3 }') 2>/dev/null


echo "Rebuild done"
