#!/bin/sh
# Takes a shadow file on input, extracts hashes, identifies hash types, runs them through hashcat, returns cracked results.

shadow=$1
dictionary=$2
outfile=$3

echo Cracking $shadow

# distinct hashcat modes to try. Testing only one hash per each hash length (hashid is very slow)
modes=$(cat $shadow | cut -d':' -f 2 | grep -v -e '^!$' -e '^*$' -e '^!!$' -e '^!!$' -e '^x$' | awk '{len=length($1); if(!seen[len]) {print $1; seen[len]=1  };  }' | xargs -n 1 hashid -m | grep '[+]' | cut -d':' -f 2 | tr -d ' ]' | grep -e '^[0-9]*$' | sort |uniq )
echo " --- Found hashcat modes: ---"
echo $modes


rm -f ./tmp/shadow_*

for m in `echo $modes`; do
  echo Mode $m
  cat $shadow | cut -d':' -f 2 > ./tmp/shadow_hashes.txt
  cat $shadow | cut -d':' -f 1-2 > ./tmp/shadow_userhashes.txt

  hashcat --force -m $m -a 0 ./tmp/shadow_hashes.txt $dictionary

  # join cracked hashes with usernames; Is there any way to feed hashes to hashcat together with usernames?
  hashcat -O --force -m $m -a 0 ./tmp/shadow_hashes.txt $dictionary --show --outfile-format 2 -o ./tmp/shadow_cracked_pass.txt
  hashcat --force -m $m -a 0 ./tmp/shadow_hashes.txt $dictionary --show --outfile-format 1 -o ./tmp/shadow_cracked_hash.txt
  # hashes in one file, their cracked passwords in another now (avoiding problem of separators this way)
  # merging stuff
  count=`cat ./tmp/shadow_cracked_pass.txt | wc -l` ;
  for i in `seq 1 $count` ; do
    hash=`sed "${i}q;d" ./tmp/shadow_cracked_hash.txt`
    pass=`sed "${i}q;d" ./tmp/shadow_cracked_pass.txt`

    grep "$hash" ./tmp/shadow_userhashes.txt | xargs -n 1 -I {} echo {}" $pass" | tee -a ./tmp/shadow_cracked_uhp.txt
    grep "$hash" ./tmp/shadow_userhashes.txt | cut -d':' -f 1 | xargs -n 1 -I {} echo {}" $pass" >> ./tmp/shadow_cracked_up.txt

  done
  # echo PRESS enter
  # read a

done

echo
echo '--- ALL CRACKED: -------------'
cat ./tmp/shadow_cracked_up.txt | sort | uniq | tee ./tmp/shadow_cracked_up_uniq.txt | tee $outfile

echo
echo Cracked count:
wc -l ./tmp/shadow_cracked_up_uniq.txt
